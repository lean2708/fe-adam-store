/* tslint:disable */
/* eslint-disable */
/**
 * Spring-Adam-Store
 * Api Service
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseBoolean } from '../models';
// @ts-ignore
import type { ApiResponseReviewResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { ReviewRequest } from '../models';
// @ts-ignore
import type { ReviewUpdateRequest } from '../models';
/**
 * ReviewControllerApi - axios parameter creator
 * @export
 */
export const ReviewControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/v1/private/reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API này dùng để đánh giá sản phẩm
         * @summary Product Review
         * @param {ReviewRequest} reviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (reviewRequest: ReviewRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewRequest' is not null or undefined
            assertParamExists('create', 'reviewRequest', reviewRequest)
            const localVarPath = `/v1/private/reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API này dùng để lấy review theo OrderItemId của người dùng hiện tại
         * @summary Get review by Order Item ID of the current user
         * @param {number} orderItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByOrderItemId: async (orderItemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderItemId' is not null or undefined
            assertParamExists('getByOrderItemId', 'orderItemId', orderItemId)
            const localVarPath = `/v1/private/reviews/order-items/{orderItemId}`
                .replace(`{${"orderItemId"}}`, encodeURIComponent(String(orderItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API kiểm tra xem user hiện tại đã đánh giá sản phẩm trong đơn hàng chưa
         * @summary Check if current user reviewed the order item
         * @param {number} orderItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isOrderItemReviewedByUser: async (orderItemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderItemId' is not null or undefined
            assertParamExists('isOrderItemReviewedByUser', 'orderItemId', orderItemId)
            const localVarPath = `/v1/private/reviews/check/{orderItemId}`
                .replace(`{${"orderItemId"}}`, encodeURIComponent(String(orderItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ReviewUpdateRequest} reviewUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (id: number, reviewUpdateRequest: ReviewUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update1', 'id', id)
            // verify required parameter 'reviewUpdateRequest' is not null or undefined
            assertParamExists('update1', 'reviewUpdateRequest', reviewUpdateRequest)
            const localVarPath = `/v1/private/reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reviewUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewControllerApi - functional programming interface
 * @export
 */
export const ReviewControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReviewControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewControllerApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API này dùng để đánh giá sản phẩm
         * @summary Product Review
         * @param {ReviewRequest} reviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(reviewRequest: ReviewRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(reviewRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewControllerApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API này dùng để lấy review theo OrderItemId của người dùng hiện tại
         * @summary Get review by Order Item ID of the current user
         * @param {number} orderItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByOrderItemId(orderItemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByOrderItemId(orderItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewControllerApi.getByOrderItemId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API kiểm tra xem user hiện tại đã đánh giá sản phẩm trong đơn hàng chưa
         * @summary Check if current user reviewed the order item
         * @param {number} orderItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isOrderItemReviewedByUser(orderItemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isOrderItemReviewedByUser(orderItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewControllerApi.isOrderItemReviewedByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ReviewUpdateRequest} reviewUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(id: number, reviewUpdateRequest: ReviewUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update1(id, reviewUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewControllerApi.update1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReviewControllerApi - factory interface
 * @export
 */
export const ReviewControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReviewControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ReviewControllerApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: ReviewControllerApiDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API này dùng để đánh giá sản phẩm
         * @summary Product Review
         * @param {ReviewControllerApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: ReviewControllerApiCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseReviewResponse> {
            return localVarFp.create(requestParameters.reviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API này dùng để lấy review theo OrderItemId của người dùng hiện tại
         * @summary Get review by Order Item ID of the current user
         * @param {ReviewControllerApiGetByOrderItemIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByOrderItemId(requestParameters: ReviewControllerApiGetByOrderItemIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseReviewResponse> {
            return localVarFp.getByOrderItemId(requestParameters.orderItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * API kiểm tra xem user hiện tại đã đánh giá sản phẩm trong đơn hàng chưa
         * @summary Check if current user reviewed the order item
         * @param {ReviewControllerApiIsOrderItemReviewedByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isOrderItemReviewedByUser(requestParameters: ReviewControllerApiIsOrderItemReviewedByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.isOrderItemReviewedByUser(requestParameters.orderItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReviewControllerApiUpdate1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1(requestParameters: ReviewControllerApiUpdate1Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseReviewResponse> {
            return localVarFp.update1(requestParameters.id, requestParameters.reviewUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in ReviewControllerApi.
 * @export
 * @interface ReviewControllerApiDeleteRequest
 */
export interface ReviewControllerApiDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof ReviewControllerApiDelete
     */
    readonly id: number
}

/**
 * Request parameters for create operation in ReviewControllerApi.
 * @export
 * @interface ReviewControllerApiCreateRequest
 */
export interface ReviewControllerApiCreateRequest {
    /**
     * 
     * @type {ReviewRequest}
     * @memberof ReviewControllerApiCreate
     */
    readonly reviewRequest: ReviewRequest
}

/**
 * Request parameters for getByOrderItemId operation in ReviewControllerApi.
 * @export
 * @interface ReviewControllerApiGetByOrderItemIdRequest
 */
export interface ReviewControllerApiGetByOrderItemIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ReviewControllerApiGetByOrderItemId
     */
    readonly orderItemId: number
}

/**
 * Request parameters for isOrderItemReviewedByUser operation in ReviewControllerApi.
 * @export
 * @interface ReviewControllerApiIsOrderItemReviewedByUserRequest
 */
export interface ReviewControllerApiIsOrderItemReviewedByUserRequest {
    /**
     * 
     * @type {number}
     * @memberof ReviewControllerApiIsOrderItemReviewedByUser
     */
    readonly orderItemId: number
}

/**
 * Request parameters for update1 operation in ReviewControllerApi.
 * @export
 * @interface ReviewControllerApiUpdate1Request
 */
export interface ReviewControllerApiUpdate1Request {
    /**
     * 
     * @type {number}
     * @memberof ReviewControllerApiUpdate1
     */
    readonly id: number

    /**
     * 
     * @type {ReviewUpdateRequest}
     * @memberof ReviewControllerApiUpdate1
     */
    readonly reviewUpdateRequest: ReviewUpdateRequest
}

/**
 * ReviewControllerApi - object-oriented interface
 * @export
 * @class ReviewControllerApi
 * @extends {BaseAPI}
 */
export class ReviewControllerApi extends BaseAPI {
    /**
     * 
     * @param {ReviewControllerApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public _delete(requestParameters: ReviewControllerApiDeleteRequest, options?: RawAxiosRequestConfig) {
        return ReviewControllerApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API này dùng để đánh giá sản phẩm
     * @summary Product Review
     * @param {ReviewControllerApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public create(requestParameters: ReviewControllerApiCreateRequest, options?: RawAxiosRequestConfig) {
        return ReviewControllerApiFp(this.configuration).create(requestParameters.reviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API này dùng để lấy review theo OrderItemId của người dùng hiện tại
     * @summary Get review by Order Item ID of the current user
     * @param {ReviewControllerApiGetByOrderItemIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public getByOrderItemId(requestParameters: ReviewControllerApiGetByOrderItemIdRequest, options?: RawAxiosRequestConfig) {
        return ReviewControllerApiFp(this.configuration).getByOrderItemId(requestParameters.orderItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API kiểm tra xem user hiện tại đã đánh giá sản phẩm trong đơn hàng chưa
     * @summary Check if current user reviewed the order item
     * @param {ReviewControllerApiIsOrderItemReviewedByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public isOrderItemReviewedByUser(requestParameters: ReviewControllerApiIsOrderItemReviewedByUserRequest, options?: RawAxiosRequestConfig) {
        return ReviewControllerApiFp(this.configuration).isOrderItemReviewedByUser(requestParameters.orderItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReviewControllerApiUpdate1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public update1(requestParameters: ReviewControllerApiUpdate1Request, options?: RawAxiosRequestConfig) {
        return ReviewControllerApiFp(this.configuration).update1(requestParameters.id, requestParameters.reviewUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

